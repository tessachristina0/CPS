/*
 * generated by Xtext 2.28.0
 */
package grid.gameoflife.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import grid.gameoflife.ide.contentassist.antlr.internal.InternalGameOfLifeDSLParser;
import grid.gameoflife.services.GameOfLifeDSLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class GameOfLifeDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GameOfLifeDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GameOfLifeDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStateAccess().getAlternatives(), "rule__State__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getGridAccess().getGroup(), "rule__Grid__Group__0");
			builder.put(grammarAccess.getCellAccess().getGroup(), "rule__Cell__Group__0");
			builder.put(grammarAccess.getGridAccess().getNameAssignment_1(), "rule__Grid__NameAssignment_1");
			builder.put(grammarAccess.getGridAccess().getLengthAssignment_3(), "rule__Grid__LengthAssignment_3");
			builder.put(grammarAccess.getGridAccess().getWidthAssignment_5(), "rule__Grid__WidthAssignment_5");
			builder.put(grammarAccess.getGridAccess().getCellsAssignment_6(), "rule__Grid__CellsAssignment_6");
			builder.put(grammarAccess.getCellAccess().getRowAssignment_1(), "rule__Cell__RowAssignment_1");
			builder.put(grammarAccess.getCellAccess().getColAssignment_3(), "rule__Cell__ColAssignment_3");
			builder.put(grammarAccess.getCellAccess().getStateAssignment_5(), "rule__Cell__StateAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GameOfLifeDSLGrammarAccess grammarAccess;

	@Override
	protected InternalGameOfLifeDSLParser createParser() {
		InternalGameOfLifeDSLParser result = new InternalGameOfLifeDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GameOfLifeDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GameOfLifeDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
